<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>Needybids</title>
    <link rel="stylesheet" href="/header-all.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
    <link rel="icon" href="images/favicon-32x32.jpeg" type="image/png" />
    <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <script src="https://kit.fontawesome.com/943c3c74fd.js" crossorigin="anonymous"></script>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        :root {
            --primary-color: #02511A;
            --secondary-color: #f5f7ff;
            --text-color: #333;
            --light-text: #777;
            --border-color: #e0e0e0;
            --online-color: #4caf50;
            --typing-color: #4caf50;
            --unread-bg: #e3f2fd;
        }

        * {
            margin: 0px;
            padding: 0px;
            box-sizing: border-box;
            font-family: 'Inter', 'Segoe UI', 'Roboto', 'Helvetica Neue', 'Arial', sans-serif;
        }

        body {
            display: flex;
            height: 100dvh;
            background-color: #e9e9e9;
        }

        /* Header and container adjustments */
        /* .website-header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: 60px;
            background: white;
            z-index: 1000;
        } */

        .chat-container {
            display: flex;
            width: 100%;
        }

        /* Sidebar */
        .sidebar {
            width: 30vw;
            background-color: #fffefc;
            border-right: 1px solid var(--border-color);
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        .sidebar-header {
            padding: 20px 15px;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .sidebar-header h2 {
            font-size: 20px;
            color: var(--text-color);
        }

        .sidebar-header .menu-icon {
            background: none;
            border: none;
            color: var(--primary-color);
            cursor: pointer;
            font-size: 1.2rem;
        }

        .search-container {
            padding: 15px;
            border-bottom: 1px solid var(--border-color);
            position: relative;
        }

        .search-container i {
            position: absolute;
            top: 50%;
            left: 26px;
            transform: translateY(-50%);
            color: gray;
        }

        .search-bar {
            width: 100%;
            padding: 10px 15px 10px 36px;
            border-radius: 14px;
            border: 1px solid var(--border-color);
            outline: none;
            font-size: 14px;
            background-color: #f5f5f5;
        }

        .search-bar:focus {
            background-color: white;
            border-color: var(--primary-color);
        }

        .chat-list {
            flex: 1;
            overflow-y: auto;
            padding-bottom: 10px;
        }

        .chat-item {
            display: flex;
            padding: 15px;
            border-bottom: 1px solid var(--border-color);
            cursor: pointer;
            transition: background-color 0.2s;
            position: relative;
        }

        .chat-item:hover {
            background-color: var(--secondary-color);
        }

        .chat-item.active {
            background-color: var(--secondary-color);
            border-left: 3px solid var(--primary-color);
        }

        .chat-item.unread {
            background-color: var(--unread-bg);
        }

        .chat-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 15px;
            position: relative;
        }

        .online-status {
            position: absolute;
            bottom: 0;
            right: 0;
            width: 12px;
            height: 12px;
            background-color: var(--online-color);
            border-radius: 50%;
            border: 2px solid white;
        }

        .chat-info {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: center;
            min-width: 0;
        }

        .chat-info h3 {
            font-size: 16px;
            margin-bottom: 5px;
            color: var(--text-color);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .chat-info p {
            font-size: 0.825rem;
            color: var(--light-text);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .chat-meta {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            margin-left: 10px;
        }

        .chat-time {
            font-size: 0.75rem;
            color: var(--light-text);
            margin-bottom: 5px;
            white-space: nowrap;
        }

        .unread-count {
            background-color: var(--primary-color);
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.75rem;
        }

        /* Main Chat Area */
        .chat-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            background-color: rgb(255, 255, 255);
            position: relative;
        }

        .chat-header {
            padding: 12px 15px;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            align-items: center;
            justify-content: space-between;
            background: white;
            z-index: 2;
        }

        .chat-header-left {
            display: flex;
            align-items: center;
            flex: 1;
            min-width: 0;
        }

        .chat-header-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 8px;
            position: relative;
        }

        .chat-header-info {
            flex: 1;
            min-width: 0;
        }

        .chat-header-info h3 {
            font-size: 1.125rem;
            color: var(--text-color);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .chat-header-info p {
            font-size: 0.825rem;
            color: var(--light-text);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .typing-indicator {
            color: var(--typing-color);
            font-size: 13px;
        }

        .chat-header-right .menu-icon {
            background: none;
            border: none;
            color: var(--primary-color);
            cursor: pointer;
            font-size: 1.2rem;
        }

        /* Back to chats button */
        .back-to-chats {
            background: none;
            border: none;
            cursor: pointer;
            font-size: 22px;
            padding: 8px;
            border-radius: 50%;
            transition: background-color 0.2s;
            display: none;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
            margin-right: 5px;
            flex-shrink: 0;
        }

        .back-to-chats:hover {
            background-color: gray;
        }

        .chat-messages {
            display: flex;
            flex-direction: column;
            gap: 5px;
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            overscroll-behavior-y: contain;
            background-image: url('Photos/bggg.jpg');
            padding-top: 10px;
        }

        .message {
            display: inline-block;
            max-width: 70%;
            padding: 8px 12px;
            border-radius: 10px;
            background-color: #e0f7e0;
            word-wrap: break-word;
            margin-bottom: 5px;
        }

        .received {
            background-color: white;
            border-top-left-radius: 5px;
            align-self: flex-start;
            border: 1px solid var(--border-color);
        }

        .sent {
            background-color: var(--primary-color);
            color: white;
            border-top-right-radius: 5px;
            align-self: flex-end;
        }

        .message-time {
            font-size: 11px;
            color: var(--light-text);
            margin-top: 5px;
            text-align: right;
        }

        .sent .message-time {
            color: rgba(255, 255, 255, 0.7);
        }

        .chat-input-container {
            padding: 15px;
            border-top: 1px solid var(--border-color);
            display: flex;
            align-items: center;
            background-color: white;
            position: sticky;
            bottom: 0;
            width: 100%;
        }

        .message-input {
            flex: 1;
            padding: 12px 15px;
            border-radius: 25px;
            border: 1px solid var(--border-color);
            outline: none;
            font-size: 15px;
            resize: none;
            max-height: 120px;
        }

        .message-input:focus {
            border-color: var(--primary-color);
        }

        .send-button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 50%;
            width: 45px;
            height: 45px;
            margin-left: 10px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s;
        }

        .send-button:hover {
            background-color: #3a5bef;
        }

        .send-button i {
            font-size: 18px;
        }

        .empty-chat {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            text-align: center;
            padding: 20px;
        }

        .empty-chat i {
            font-size: 50px;
            color: var(--light-text);
            margin-bottom: 20px;
        }

        .empty-chat h3 {
            font-size: 18px;
            color: var(--text-color);
            margin-bottom: 10px;
        }

        .empty-chat p {
            font-size: 14px;
            color: var(--light-text);
            max-width: 300px;
            margin-bottom: 20px;
        }

        @media (max-width: 768px) {
            body {
                height: 100dvh;
                overflow: hidden;
                margin: 0;
                padding: 0;
            }

            .website-header {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                height: 55px;
                background: white;
                z-index: 1000;
                display: block;
                /* Ensure it's visible by default */
            }

            .chat-container {
                position: fixed;
                top: 55px;
                left: 0;
                right: 0;
                bottom: 0;
                height: calc(100dvh - 55px);
                overflow: hidden;
            }

            .sidebar {
                width: 100%;
                height: 100%;
                position: absolute;
                top: 0;
                left: 0;
                z-index: 10;
            }

            .sidebar.hidden {
                transform: translateX(-100%);
            }

            .chat-area {
                width: 100%;
                height: 100%;
                position: absolute;
                top: 0;
                left: 0;
                z-index: 5;
                display: none;
            }

            .chat-area.active {
                display: flex;
            }

            .chat-header {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                height: 55px;
                background: white;
                z-index: 1001; /* Higher than website header to stay on top */
                display: none;
                /* Hidden by default */
                padding: 8px 15px;
                border-bottom: 1px solid var(--border-color);
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }

            .chat-area.active .chat-header {
                display: flex; /* Show when chat is active */
            }

            .chat-messages {
                flex: 1;
                overflow-y: auto;
                padding-inline: 15px;
             /* Space for fixed header */
                padding-bottom: 90px;
                /* Space for fixed input */
                overscroll-behavior: contain;
                -webkit-overflow-scrolling: touch;
            }

            .chat-input-container {
                position: fixed;
                bottom: 0;
                left: 0;
                right: 0;
                padding: 10px;
                background: white;
                border-top: 1px solid var(--border-color);
                z-index: 1001;
                box-shadow: 0 -2px 4px rgba(0,0,0,0.1);
            }

            .back-to-chats {
                display: flex;
            }

            .message {
                max-width: 85%;
            }
        }

        @media (max-width: 480px) {
            .sidebar-header h2 {
                font-size: 16px;
            }

            .chat-header-info h3 {
                font-size: 14px;
            }

            .message-input {
                font-size: 13px;
                padding: 10px 15px;
            }

            .send-button {
                width: 40px;
                height: 40px;
            }

            .chat-messages {
                 padding-bottom: 80px;
            }
        }
    </style>
</head>

<body>
    <div class="website-header">
        <%- include('header-all') %>
    </div>

    <div class="chat-container">
        <!-- Sidebar with chat list -->
        <div class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <h2>Messages</h2>
                <button class="menu-icon"><i class="fas fa-ellipsis-v"></i></button>
            </div>

            <div class="search-container">
                <i class="fa fa-search"></i>
                <input type="text" class="search-bar" placeholder="Search...">
            </div>

            <div class="chat-list" id="chatList">
                <!-- Chat items will be dynamically loaded here -->
            </div>
        </div>

        <!-- Main chat area -->
        <div class="chat-area" id="chatArea">
            <div class="chat-header">
                <button class="back-to-chats" id="backToChatsBtn">
                    <i class="fas fa-arrow-left"></i>
                </button>
                <div class="chat-header-left">
                    <img id="chatHeaderAvatar" class="chat-header-avatar" src="https://placehold.co/40x40"
                        alt="User Avatar">
                    <div class="chat-header-info">
                        <h3 id="chatPartnerName"></h3>
                        <p id="chatPartnerStatus"></p>
                    </div>
                </div>
                <div class="chat-header-menu" style="cursor:pointer;" onclick="deleteCurrentChat()" title="Delete Chat">
                    <i class="bi bi-three-dots-vertical"></i>
                </div>
            </div>

            <div class="chat-messages" id="chatMessages">
                <!-- Will be filled when a chat is selected -->
            </div>

            <div class="chat-input-container" id="chatInputContainer">
                <textarea class="message-input" placeholder="Type message here" id="messageInput"></textarea>
                <button class="send-button" id="sendButton">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </div>

    <script src="/js/header-all.js"></script>
    <script>document.addEventListener('DOMContentLoaded', function () {
            // DOM Elements
            const chatList = document.getElementById('chatList');
            const chatArea = document.getElementById('chatArea');
            const sidebar = document.getElementById('sidebar');
            const chatMessages = document.getElementById('chatMessages');
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            const chatInputContainer = document.getElementById('chatInputContainer');
            const searchBar = document.querySelector('.search-bar');
            const backToChatsBtn = document.getElementById('backToChatsBtn');
            const chatHeaderAvatar = document.getElementById('chatHeaderAvatar');
            const chatPartnerName = document.getElementById('chatPartnerName');
            const chatPartnerStatus = document.getElementById('chatPartnerStatus');

            // State variables
            let currentUser = null;
            let currentUserId = null;
            let users = [];
            let currentChatUser = null;
            let isMobile = window.innerWidth <= 768;
            let socket = null;
            let currentRoom = null;
            let lastMessages = {};

            // Initialize the app
            initApp();

            async function initApp() {
                await loadCurrentUser();
                await loadUsers();
                setupEventListeners();
                handleResize();
                setupMobileBehavior();

                socket = io();
                if (socket) {
                    socket.on('receive_message', (data) => {
                        if (currentChatUser && data && data.sender === currentChatUser.username) {
                            appendMessage(data);
                            updateLastMessage(currentChatUser.username, data.text, data.time);
                        }
                    });
                }
            }

            function setupMobileBehavior() {
                if (!isMobile) return;

                const chatMessages = document.getElementById('chatMessages');
                const messageInput = document.getElementById('messageInput');
                let keyboardHeight = 0;

                // Track keyboard state
                messageInput.addEventListener('focus', () => {
                    const originalScroll = chatMessages.scrollTop;
                    const originalHeight = chatMessages.scrollHeight;

                    setTimeout(() => {
                        const newHeight = chatMessages.scrollHeight;
                        keyboardHeight = newHeight - originalHeight;
                        chatMessages.scrollTop = originalScroll + keyboardHeight;
                    }, 300);
                });

                // Prevent body scrolling
                document.body.style.overflow = 'hidden';
                document.documentElement.style.overflow = 'hidden';

                // Handle touch events
                chatMessages.addEventListener('touchstart', function (e) {
                    this.startY = e.touches[0].clientY;
                });

                chatMessages.addEventListener('touchmove', function (e) {
                    const y = e.touches[0].clientY;
                    const isInputFocused = document.activeElement === messageInput;

                    if (isInputFocused) {
                        e.preventDefault();
                        return;
                    }

                    const atTop = this.scrollTop === 0;
                    const atBottom = this.scrollHeight - this.scrollTop === this.clientHeight;
                    const scrollingUp = y > this.startY;
                    const scrollingDown = y < this.startY;

                    if ((atTop && scrollingUp) || (atBottom && scrollingDown)) {
                        e.preventDefault();
                    }

                    this.startY = y;
                }, { passive: false });
            }

            async function loadCurrentUser() {
                const res = await fetch('/api/auth/me', { credentials: 'include' });
                const data = await res.json();
                if (data.success && data.data && data.data.user) {
                    currentUser = data.data.user;
                    currentUserId = data.data.user._id;
                } else {
                    window.location.href = '/signup';
                }
            }

            async function loadUsers() {
                const res = await fetch('/api/chat/users', { credentials: 'include' });
                const data = await res.json();
                if (data.success) {
                    users = data.users;
                    await Promise.all(users.map(async user => {
                        const messagesRes = await fetch(`/api/chat/messages/${user.username}?limit=1`, { credentials: 'include' });
                        const messagesData = await messagesRes.json();
                        if (messagesData.success && messagesData.messages.length > 0) {
                            const lastMsg = messagesData.messages[0];
                            lastMessages[user.username] = {
                                text: lastMsg.text,
                                time: lastMsg.time
                            };
                        }
                    }));
                    renderChatList(users);
                    hideChatHeaderIfNoUsers();

                    const urlParams = new URLSearchParams(window.location.search);
                    const sellerUsername = urlParams.get('seller');
                    if (sellerUsername) {
                        await startChatWithSeller(sellerUsername);
                    } else if (users.length > 0 && !isMobile) {
                        openChat(users[0]);
                    }
                }
            }

            function setupEventListeners() {
                sendButton.addEventListener('click', sendMessage);

                messageInput.addEventListener('keypress', function (e) {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        sendMessage();
                    }
                });

                searchBar.addEventListener('input', function () {
                    const searchTerm = this.value.toLowerCase();
                    const filteredUsers = users.filter(user =>
                        user.username.toLowerCase().includes(searchTerm)
                    );
                    renderChatList(filteredUsers);
                });

                backToChatsBtn.addEventListener('click', goBackToChats);
                window.addEventListener('resize', handleResize);
            }

            function handleResize() {
                const wasMobile = isMobile;
                isMobile = window.innerWidth <= 768;

                if (wasMobile && !isMobile) {
                    sidebar.classList.remove('hidden');
                    chatArea.classList.remove('active');
                }

                if (!wasMobile && isMobile && currentChatUser) {
                    showChatOnMobile();
                }
            }
            function goBackToChats() {
                if (isMobile) {
                    // Show website header again
                    document.querySelector('.website-header').style.display = 'block';

                    // Hide chat area
                    chatArea.classList.remove('active');

                    // Show sidebar
                    sidebar.classList.remove('hidden');

                    if (currentChatUser) {
                        const activeItem = document.querySelector(`.chat-item[data-username="${currentChatUser.username}"]`);
                        if (activeItem) {
                            activeItem.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        }
                    }
                }
            }

            function showChatOnMobile() {
                if (isMobile) {
                    // Hide website header and sidebar
                    document.querySelector('.website-header').style.display = 'none';
                    sidebar.classList.add('hidden');

                    // Show chat area with chat header
                    chatArea.classList.add('active');

                    // Ensure chat header is visible
                    document.querySelector('.chat-header').style.display = 'flex';

                    setTimeout(() => {
                        if (chatMessages) {
                            chatMessages.scrollTop = chatMessages.scrollHeight;
                        }
                    }, 100);
                }
            }

            function getRoomName(user1, user2) {
                return [user1, user2].sort().join('-'); // user1 and user2 are userIds
            }

            async function startChatWithSeller(sellerUsername) {
                if (!currentUser || !currentUser.username || !sellerUsername) return;
                if (currentUser.username === sellerUsername) {
                    // Show error popup
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'signin-popup show';
                    errorDiv.innerHTML = 'Cannot talk with yourself';
                    errorDiv.style.position = 'fixed';
                    errorDiv.style.top = '24px';
                    errorDiv.style.left = '50%';
                    errorDiv.style.transform = 'translateX(-50%)';
                    errorDiv.style.background = '#d32f2f';
                    errorDiv.style.color = '#fff';
                    errorDiv.style.padding = '10px 24px';
                    errorDiv.style.borderRadius = '8px';
                    errorDiv.style.zIndex = '9999';
                    document.body.appendChild(errorDiv);
                    setTimeout(() => errorDiv.remove(), 2500);
                    return;
                }
                await fetch(`/api/chat/request/${encodeURIComponent(sellerUsername)}`, { method: 'POST', credentials: 'include' });
                let sellerUser = users.find(u => u.username === sellerUsername);
                if (!sellerUser) {
                    try {
                        const sellerRes = await fetch(`/api/user/public/${encodeURIComponent(sellerUsername)}`);
                        const sellerData = await sellerRes.json();
                        sellerUser = sellerData.success && sellerData.user ? sellerData.user : { username: sellerUsername, profilePicture: '' };
                    } catch (e) {
                        sellerUser = { username: sellerUsername, profilePicture: '' };
                    }
                }
                openChat(sellerUser);
            }

            function renderChatList(userArray = users) {
                chatList.innerHTML = '';
                if (userArray.length === 0) {
                    chatList.innerHTML = '<p style="padding: 20px; text-align: center; color: var(--light-text);">No users found</p>';
                    document.getElementById('chatArea').style.display = 'none';
                    return;
                }

                userArray.forEach(user => {
                    const lastMsg = lastMessages[user.username] || null;
                    const chatItem = document.createElement('div');
                    chatItem.className = `chat-item${currentChatUser && user.username === currentChatUser.username ? ' active' : ''}`;
                    chatItem.dataset.username = user.username;
                    chatItem.innerHTML = `
                <img src="${user.profilePicture || 'https://via.placeholder.com/50'}" alt="${user.username}" class="chat-avatar">
                <div class="chat-info">
                    <h3>${user.username}</h3>
                    <p>${lastMsg ? lastMsg.text : 'No messages yet'}</p>
                </div>
                <div class="chat-meta">
                    <div class="chat-time">${lastMsg ? formatTime(lastMsg.time) : ''}</div>
                </div>
            `;
                    chatItem.addEventListener('click', () => openChat(user));
                    chatList.appendChild(chatItem);
                });

                if (!currentChatUser) {
                    document.getElementById('chatArea').style.display = 'none';
                }
            }

            function updateLastMessage(username, text, time) {
                lastMessages[username] = { text, time };
                const chatItem = document.querySelector(`.chat-item[data-username="${username}"]`);
                if (chatItem) {
                    const lastMsgEl = chatItem.querySelector('.chat-info p');
                    const timeEl = chatItem.querySelector('.chat-time');
                    if (lastMsgEl) lastMsgEl.textContent = text;
                    if (timeEl) timeEl.textContent = formatTime(time);
                }
            }

            async function openChat(user) {
                currentChatUser = user;
                document.querySelectorAll('.chat-item').forEach(item => {
                    item.classList.remove('active');
                    if (item.dataset.username === user.username) {
                        item.classList.add('active');
                    }
                });

                chatHeaderAvatar.src = user.profilePicture || 'https://placehold.co/40x40';
                chatPartnerName.textContent = user.username;
                chatPartnerStatus.textContent = '';
                chatArea.style.display = 'flex';
                await loadMessages(user.username);

                if (isMobile) showChatOnMobile();

                if (socket) {
                    const room = getRoomName(currentUserId, user._id);
                    if (currentRoom !== room) {
                        if (currentRoom) {
                            socket.emit('leave', currentRoom);
                        }
                        socket.emit('join', room);
                        currentRoom = room;
                    }
                }
            }

            async function loadMessages(username) {
                chatMessages.innerHTML = '<div class="empty-chat"><i class="far fa-comment-dots"></i><h3>Loading...</h3></div>';
                const res = await fetch(`/api/chat/messages/${username}`, { credentials: 'include' });
                const data = await res.json();

                if (data.success) {
                    renderMessages(data.messages);
                    if (data.messages.length > 0) {
                        const lastMsg = data.messages[data.messages.length - 1];
                        updateLastMessage(username, lastMsg.text, lastMsg.time);
                    }
                } else {
                    chatMessages.innerHTML = '<div class="empty-chat"><i class="far fa-comment-dots"></i><h3>Error loading messages</h3></div>';
                }
            }

            function renderMessages(messages) {
                if (!messages || messages.length === 0) {
                    chatMessages.innerHTML = `
                <div class="empty-chat">
                    <i class="far fa-comment-dots"></i>
                    <h3>No messages yet</h3>
                    <p>Start the conversation with ${currentChatUser ? currentChatUser.username : ''}</p>
                </div>
            `;
                    return;
                }

                chatMessages.innerHTML = '';
                messages.forEach(message => {
                    const senderId = message.sender && message.sender._id ? message.sender._id : message.sender;
                    const messageElement = document.createElement('div');
                    messageElement.className = `message ${senderId === currentUserId ? 'sent' : 'received'}`;
                    messageElement.innerHTML = `
                        <div class="message-text">${message.text}</div>
                        <div class="message-time">${formatTime(message.time)}</div>
                    `;
                    chatMessages.appendChild(messageElement);
                });

                setTimeout(() => {
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }, 50);
            }

            async function sendMessage() {
                const messageText = messageInput.value.trim();
                if (!messageText || !currentChatUser) return;

                const optimisticMsg = {
                    sender: currentUserId,
                    text: messageText,
                    time: new Date().toISOString()
                };
                appendMessage(optimisticMsg);
                updateLastMessage(currentChatUser.username, messageText, optimisticMsg.time);
                messageInput.value = '';

                if (socket) {
                    const room = getRoomName(currentUserId, currentChatUser._id);
                    if (currentRoom !== room) {
                        if (currentRoom) {
                            socket.emit('leave', currentRoom);
                        }
                        socket.emit('join', room);
                        currentRoom = room;
                    }
                }

                const res = await fetch(`/api/chat/messages/${currentChatUser.username}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include',
                    body: JSON.stringify({ text: messageText })
                });

                if (res.ok && socket && currentRoom) {
                    let savedMsg = null;
                    try {
                        const data = await res.json();
                        if (data && data.message) {
                            savedMsg = data.message;
                            updateLastMessage(currentChatUser.username, messageText, savedMsg.time);
                        }
                    } catch (e) { }

                    socket.emit('send_message', {
                        room: currentRoom,
                        sender: currentUser.username,
                        text: messageText,
                        time: savedMsg && savedMsg.time ? savedMsg.time : new Date()
                    });
                }
            }

            function appendMessage(message) {
                const senderId = message.sender && message.sender._id ? message.sender._id : message.sender;
                const messageElement = document.createElement('div');
                messageElement.className = `message ${senderId === currentUserId ? 'sent' : 'received'}`;
                messageElement.innerHTML = `
                    <div class="message-text">${message.text}</div>
                    <div class="message-time">${formatTime(message.time)}</div>
                `;
                chatMessages.appendChild(messageElement);
                setTimeout(() => {
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }, 50);
            }

            function formatTime(time) {
                const date = new Date(time);
                let hours = date.getHours();
                const minutes = date.getMinutes().toString().padStart(2, '0');
                const ampm = hours >= 12 ? 'PM' : 'AM';
                hours = hours % 12;
                hours = hours ? hours : 12;
                return `${hours}:${minutes} ${ampm}`;
            }

            async function deleteCurrentChat() {
                if (!currentChatUser || !confirm('Are you sure you want to delete this chat?')) return;

                const res = await fetch(`/api/chat/${currentChatUser.username}`, {
                    method: 'DELETE',
                    credentials: 'include'
                });

                if (res.ok) {
                    users = users.filter(u => u.username !== currentChatUser.username);
                    delete lastMessages[currentChatUser.username];
                    renderChatList(users);
                    currentChatUser = null;
                    chatMessages.innerHTML = '';
                    hideChatHeaderIfNoUsers();

                    if (isMobile) {
                        goBackToChats();
                    }
                } else {
                    showInPageAlert('Failed to delete chat.');
                }
            }

            function hideChatHeaderIfNoUsers() {
                const chatHeader = document.querySelector('.chat-header');
                chatHeader.style.display = users.length === 0 ? 'none' : 'flex';
            }

            window.deleteCurrentChat = deleteCurrentChat;
        });</script>
</body>

</html>