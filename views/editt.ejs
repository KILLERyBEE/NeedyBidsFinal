<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>NeedyBids - Edit Profile</title>
  <link rel="icon" href="images/favicon-32x32.png" type="image/png" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&family=Inconsolata&display=swap"
    rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
  <script src="https://kit.fontawesome.com/943c3c74fd.js" crossorigin="anonymous"></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Inter', 'Segoe UI', 'Roboto', 'Helvetica Neue', 'Arial', 'Noto Sans', sans-serif;
    }

    body {
      background: #ffffff;
      min-height: 100vh;
      margin: 0;
      padding: 0;
    }

    .container {
      background: #fff;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      max-width: 1200px;
      margin: 0 auto;
      /* box-shadow: 0 0 20px rgba(0, 0, 0, 0.1); */
    }

    .header {
      padding: 15px;
      background-color: #ebebeb;
      border-bottom: 1px solid #eee;
      display: flex;
      align-items: center;
    }

    .header h1 {
      font-size: 1.25rem;
      color: #333;
      display: flex;
      align-items: center;
    }

    .back-btn {
      font-size: 1.2rem;
      color: #555;
      background: none;
      border: none;
      cursor: pointer;
      transition: color 0.3s ease;
      margin-right: 20px;
    }

    .back-btn:hover {
      color: #000;
    }

    .profile-content {
      display: flex;
      flex: 1;
      padding: 40px;
      gap: 40px;
    }


    .profile-sidebar {
      width: 300px;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .profile-main {
      flex: 1;
      padding: 20px;
    }
      .profile-form {
      max-width: 600px;
    }


    @media (max-width: 768px) {
      .container {
        max-width: 100%;
        margin: 0;
        padding: 30px 10px;
        /* optional small padding */
      }

      .profile-sidebar {
        width: 100%;
      }

      .profile-form {
       max-width: 100% ;
      }

      .profile-main {
        flex: 1;
        padding: 0;
      }

      .profile-content {
        flex-direction: column;
        padding: 10px;
        gap: 10px;
      }
    }



    .upload-group {
      text-align: center;
      margin-bottom: 30px;
    }

    .upload-circle {
      width: 150px;
      height: 150px;
      border-radius: 50%;
      background-color: #f5f5f5;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto;
      cursor: pointer;
      position: relative;
      overflow: hidden;
      border: 1px dashed #ccc;
      transition: all 0.3s ease;
    }

    .upload-circle:hover {
      background-color: #ebebeb;
      border-color: #02511A;
    }

    .upload-circle input[type="file"] {
      position: absolute;
      width: 100%;
      height: 100%;
      opacity: 0;
      cursor: pointer;
    }

    .upload-icon {
      font-size: 36px;
      color: #666;
      transition: color 0.3s ease;
    }

    .upload-circle:hover .upload-icon {
      color: #02511A;
    }

    .upload-text {
      font-size: 0.875rem;
      color: #555;
      margin-top: 12px;
      text-align: center;
    }

    .upload-preview {
      width: 100%;
      height: 100%;
      border-radius: 50%;
      object-fit: cover;
      position: absolute;
      top: 0;
      left: 0;
      display: none;
    }

  
    .form-group {
      margin-bottom: 20px;
    }

    label {
      font-size: 0.95rem;
      font-weight: 500;
      display: block;
      margin-bottom: 8px;
      color: #333;
    }

    input,
    textarea {
      width: 100%;
      padding: 12px 15px;
      font-size: 0.95rem;
      border: 1px solid #ddd;
      border-radius: 8px;
      transition: border-color 0.3s ease;
    }

    .email-display {
      padding: 12px 15px;
      font-size: 0.95rem;
      background-color: #f9f9f9;
      border-radius: 8px;
      border: 1px solid #eee;
      color: #555;
    }

    textarea {
      min-height: 100px;
      resize: vertical;
    }

    .readonly-input {
      background-color: #f9f9f9;
      color: #555;
      cursor: not-allowed;
    }

    input:focus,
    textarea:focus {
      outline: none;
      border-color: #02511A;
      box-shadow: 0 0 0 2px rgba(2, 81, 26, 0.1);
    }

    input.error,
    textarea.error {
      border-color: #e74c3c;
      box-shadow: 0 0 0 2px rgba(231, 76, 60, 0.1);
    }

    input.success,
    textarea.success {
      border-color: #27ae60;
      box-shadow: 0 0 0 2px rgba(39, 174, 96, 0.1);
    }

    .error-message {
      color: #e74c3c;
      font-size: 0.875rem;
      margin-top: 6px;
      display: none;
    }

    .error-message.show {
      display: block;
    }

    .btn-group {
      display: flex;
      justify-content: flex-end;
      margin-top: 30px;
      gap: 15px;
    }

    .btn {
      padding: 10px 20px;
      font-size: 1.125rem;
      color: white;
      background-color: #02511A;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      transition: background-color 0.3s ease;
      font-weight: 500;
    }

    .btn:hover:not(:disabled) {
      background-color: #2c633c;
    }

    .btn:disabled {
      background-color: #ccc;
      cursor: not-allowed;
    }

    .btn.cancel {
      background: #fff;
      border: 1px solid #ddd;
      color: #555;
    }

    .btn.cancel:hover {
      background: #f5f5f5;
    }

    .btn.loading {
      position: relative;
      color: transparent;
    }

    .btn.loading::after {
      content: '';
      position: absolute;
      width: 20px;
      height: 20px;
      top: 50%;
      left: 50%;
      margin-left: -10px;
      margin-top: -10px;
      border: 2px solid #ffffff;
      border-radius: 50%;
      border-top-color: transparent;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }

    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 12px 24px;
      border-radius: 8px;
      color: white;
      font-weight: 500;
      z-index: 1000;
      transform: translateX(400px);
      transition: transform 0.3s ease;
    }

    .notification.show {
      transform: translateX(0);
    }

    .notification.success {
      background-color: #27ae60;
    }

    .notification.error {
      background-color: #e74c3c;
    }
  </style>
</head>

<body>
  <div class="header">
    <h1>
      <button class="back-btn" onclick="window.history.back()">
        <i class="fas fa-arrow-left"></i>
      </button>
      Edit Profile
    </h1>
  </div>
  <div class="container">


    <div class="profile-content">
      <div class="profile-sidebar">
        <div class="upload-group">
          <div class="upload-circle" id="uploadContainer">
            <i class="fas fa-user upload-icon" id="upload-icon"></i>
            <img id="preview" class="upload-preview" />
            <input type="file" id="pfp" name="pfp" accept="image/*" onchange="previewImage(event)" />
          </div>
          <div class="upload-text">Click to change profile picture</div>
          <% if (!(user && user.profilePicture)) { %>
            <div class="error-message" id="pfpError" style="display:block;color:#e74c3c;">Profile picture is recommended</div>
          <% } else { %>
            <div class="error-message" id="pfpError"></div>
          <% } %>
        </div>
      </div>

      <div class="profile-main">
        <form id="profileForm" class="profile-form">
          <div class="form-group">
            <label for="username">Username</label>
              <input type="text" id="username" name="username" value="<%= (user && user.username) ? user.username : '' %>" required />
            <div class="error-message" id="usernameError"></div>
          </div>

          <div class="form-group">
            <label for="email">Email</label>
              <input type="email" id="email" name="email" value="<%= (user && user.email) ? user.email : '' %>" required readonly class="readonly-input" aria-readonly="true" />
            <div class="error-message" id="emailError"></div>
          </div>

          <div class="form-group">
            <label for="contact">Contact Number</label>
              <input type="text" id="contact" name="contact" value="<%= (user && user.contact) ? user.contact : '' %>" />
            <div class="error-message" id="contactError"></div>
          </div>

          <div class="form-group">
            <label for="bio">About You</label>
            <textarea id="bio" name="bio" placeholder="Describe yourself..."><%= (user && user.about) ? user.about : '' %></textarea>
            <div class="error-message" id="bioError"></div>
          </div>

          <div class="btn-group">
            <button type="button" class="btn cancel" onclick="window.history.back()">Cancel</button>
            <button type="submit" class="btn save" id="saveBtn">Save </button>
          </div>
        </form>
      </div>
    </div>
  </div>
<script src="/js/editt.js"></script>
  <script>
    // Profile picture upload functionality
    let hasUploadedImage = false;

    function triggerUpload() {
      document.getElementById('pfp').click();
    }

    function previewImage(event) {
      const file = event.target.files[0];
      const preview = document.getElementById('preview');
      const icon = document.getElementById('upload-icon');

      if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
          preview.src = e.target.result;
          preview.style.display = 'block';
          icon.style.display = 'none';
          hasUploadedImage = true;
          clearValidation('pfp');
        }
        reader.readAsDataURL(file);
      }
    }

    function clearValidation(fieldId) {
      const errorElement = document.getElementById(fieldId + 'Error');
      const inputElement = document.getElementById(fieldId);

      if (errorElement) {
        errorElement.classList.remove('show');
      }

      if (inputElement) {
        inputElement.classList.remove('error', 'success');
      }
    }

    // Validation functions
    function validateContact(contact) {
      // Simple contact validation - adjust as needed
      return contact.length >= 10;
    }

    function showError(fieldId, message) {
      const errorElement = document.getElementById(fieldId + 'Error');
      const inputElement = document.getElementById(fieldId);

      if (errorElement) {
        errorElement.textContent = message;
        errorElement.classList.add('show');
      }

      if (inputElement) {
        inputElement.classList.add('error');
        inputElement.classList.remove('success');
      }
    }

    function showSuccess(fieldId) {
      const errorElement = document.getElementById(fieldId + 'Error');
      const inputElement = document.getElementById(fieldId);

      if (errorElement) {
        errorElement.classList.remove('show');
      }

      if (inputElement) {
        inputElement.classList.remove('error');
        inputElement.classList.add('success');
      }
    }

    // Real-time validation
    document.getElementById('username').addEventListener('input', function () {
      const username = this.value.trim();
      if (username === '') {
        showError('username', 'Username is required');
      } else if (username.length < 3) {
        showError('username', 'Username must be at least 3 characters');
      } else {
        showSuccess('username');
      }
    });

    document.getElementById('contact').addEventListener('input', function () {
      const contact = this.value.trim();
      if (contact === '') {
        showError('contact', 'Contact number is required');
      } else if (!validateContact(contact)) {
        showError('contact', 'Please enter a valid contact number');
      } else {
        showSuccess('contact');
      }
    });

  // ...existing code...

    // Initialize the preview with the default avatar
    document.addEventListener('DOMContentLoaded', function () {
      const preview = document.getElementById('preview');
      // Only show the icon initially if there's no image
      if (!preview.src) {
        preview.style.display = 'none';
        document.getElementById('upload-icon').style.display = 'flex';
      }
    });
  </script>
</body>

</html>